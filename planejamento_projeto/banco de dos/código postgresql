-- #############################################################################
-- ## FUNÇÃO PARA ATUALIZAR O TIMESTAMP DE 'updated_at' AUTOMATICAMENTE      ##
-- #############################################################################

-- Crie esta função UMA VEZ no seu editor SQL.
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- #############################################################################
-- ## CRIAÇÃO DAS TABELAS                                                     ##
-- #############################################################################

-- Tabela: users
CREATE TABLE users (
    user_id BIGSERIAL PRIMARY KEY,
    whatsapp_id TEXT NOT NULL UNIQUE,
    push_name TEXT NULL,
    bank_value DECIMAL(12, 2) NULL,
    daily_goal_value DECIMAL(12, 2) NULL,
    goal_timeframe_days INTEGER NULL,
    investor_profile TEXT NULL,
    favorite_teams JSONB NULL,
    remaining_credits INTEGER NOT NULL DEFAULT 0,
    credits_last_reset_at TIMESTAMPTZ NULL,
    recent_loss_signals_count INTEGER NOT NULL DEFAULT 0,
    active_analysis_game_id TEXT NULL,
    active_analysis_details JSONB NULL,
    current_subscription_id BIGINT NULL, -- FK será adicionada depois
    onboarding_completed_at TIMESTAMPTZ NULL,
    last_favorite_team_notification_at TIMESTAMPTZ NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: plans
CREATE TABLE plans (
    plan_id SERIAL PRIMARY KEY,
    plan_name TEXT NOT NULL UNIQUE,
    description TEXT NULL,
    daily_analysis_limit INTEGER NOT NULL DEFAULT 1,
    duration_days INTEGER NULL,
    price DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: user_subscriptions
CREATE TABLE user_subscriptions (
    subscription_id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL, -- FK será adicionada depois
    plan_id INTEGER NOT NULL, -- FK será adicionada depois
    start_date TIMESTAMPTZ NOT NULL DEFAULT now(),
    end_date TIMESTAMPTZ NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    auto_renews BOOLEAN NOT NULL DEFAULT FALSE,
    payment_transaction_id TEXT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: leagues
CREATE TABLE leagues (
    league_id SERIAL PRIMARY KEY,
    api_football_league_id INTEGER NULL UNIQUE,
    league_name TEXT NOT NULL,
    country_name TEXT NULL,
    league_type TEXT NULL,
    logo_url TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    display_order INTEGER NOT NULL DEFAULT 0,
    coverage_info JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: interaction_log
CREATE TABLE interaction_log (
    log_id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NULL, -- FK será adicionada depois
    "timestamp" TIMESTAMPTZ NOT NULL DEFAULT now(), -- Renomeado para evitar conflito com palavra reservada, se necessário, mas "timestamp" é aceitável em PostgreSQL se usado com aspas ou se não for o tipo de dado. Usarei "timestamp" conforme o original.
    event_type TEXT NOT NULL,
    details JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
    -- updated_at não foi especificado para esta tabela
);

-- Tabela: user_bets
CREATE TABLE user_bets (
    bet_id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL, -- FK será adicionada depois
    game_id_api_football TEXT NULL,
    league_id INTEGER NULL, -- FK será adicionada depois
    bet_description TEXT NOT NULL,
    stake_amount DECIMAL(12, 2) NULL,
    odds DECIMAL(5, 2) NULL,
    bet_timestamp TIMESTAMPTZ NOT NULL DEFAULT now(),
    result TEXT NULL,
    profit_loss_amount DECIMAL(12, 2) NULL,
    notes TEXT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: knowledge_base
CREATE TABLE knowledge_base (
    kb_id SERIAL PRIMARY KEY,
    kb_type TEXT NOT NULL,
    kb_key TEXT NOT NULL,
    kb_value TEXT NOT NULL,
    kb_context_tags JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT unique_kb_type_key UNIQUE (kb_type, kb_key)
);

-- Tabela: app_settings
CREATE TABLE app_settings (
    setting_id SERIAL PRIMARY KEY,
    setting_name TEXT NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    description TEXT NULL,
    is_secure BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- #############################################################################
-- ## ADIÇÃO DE CHAVES ESTRANGEIRAS (FOREIGN KEYS)                            ##
-- #############################################################################

-- Chave Estrangeira: users.current_subscription_id -> user_subscriptions.subscription_id
ALTER TABLE users
ADD CONSTRAINT fk_users_current_subscription
FOREIGN KEY (current_subscription_id)
REFERENCES user_subscriptions(subscription_id)
ON DELETE SET NULL; -- Define o que acontece se a assinatura referenciada for deletada

-- Chave Estrangeira: user_subscriptions.user_id -> users.user_id
ALTER TABLE user_subscriptions
ADD CONSTRAINT fk_user_subscriptions_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE CASCADE; -- Define o que acontece se o usuário referenciado for deletado

-- Chave Estrangeira: user_subscriptions.plan_id -> plans.plan_id
ALTER TABLE user_subscriptions
ADD CONSTRAINT fk_user_subscriptions_plan
FOREIGN KEY (plan_id)
REFERENCES plans(plan_id)
ON DELETE RESTRICT; -- Impede a exclusão de um plano se ele estiver em uso

-- Chave Estrangeira: interaction_log.user_id -> users.user_id
ALTER TABLE interaction_log
ADD CONSTRAINT fk_interaction_log_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE SET NULL; -- Define o que acontece se o usuário referenciado for deletado

-- Chave Estrangeira: user_bets.user_id -> users.user_id
ALTER TABLE user_bets
ADD CONSTRAINT fk_user_bets_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE CASCADE; -- Define o que acontece se o usuário referenciado for deletado

-- Chave Estrangeira: user_bets.league_id -> leagues.league_id
ALTER TABLE user_bets
ADD CONSTRAINT fk_user_bets_league
FOREIGN KEY (league_id)
REFERENCES leagues(league_id)
ON DELETE SET NULL; -- Define o que acontece se a liga referenciada for deletada

-- #############################################################################
-- ## CRIAÇÃO DOS TRIGGERS PARA 'updated_at'                                  ##
-- #############################################################################

-- Trigger para a tabela: users
CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: plans
CREATE TRIGGER set_timestamp_plans
BEFORE UPDATE ON plans
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: user_subscriptions
CREATE TRIGGER set_timestamp_user_subscriptions
BEFORE UPDATE ON user_subscriptions
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: leagues
CREATE TRIGGER set_timestamp_leagues
BEFORE UPDATE ON leagues
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: user_bets
CREATE TRIGGER set_timestamp_user_bets
BEFORE UPDATE ON user_bets
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: knowledge_base
CREATE TRIGGER set_timestamp_knowledge_base
BEFORE UPDATE ON knowledge_base
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para a tabela: app_settings
CREATE TRIGGER set_timestamp_app_settings
BEFORE UPDATE ON app_settings
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Fim do script
