-- Habilita a extensão pgcrypto se ainda não estiver habilitada (para gen_random_uuid())
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- #############################################################################
-- ## FUNÇÃO PARA ATUALIZAR O TIMESTAMP DE 'updated_at' AUTOMATICAMENTE     ##
-- #############################################################################

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- #############################################################################
-- ## CRIAÇÃO DAS TABELAS                                                     ##
-- #############################################################################

-- Tabela: users
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT auth.uid(),
    whatsapp_id TEXT NOT NULL UNIQUE,
    push_name TEXT NULL,
    bank_value DECIMAL(12, 2) NULL,
    daily_goal_value DECIMAL(12, 2) NULL,
    goal_timeframe_days INTEGER NULL,
    investor_profile TEXT NULL,
    favorite_teams JSONB NULL,
    remaining_credits INTEGER NOT NULL DEFAULT 0,
    credits_last_reset_at TIMESTAMPTZ NULL,
    recent_loss_signals_count INTEGER NOT NULL DEFAULT 0,
    active_analysis_game_id TEXT NULL,
    active_analysis_details JSONB NULL,
    current_subscription_id UUID NULL,
    onboarding_completed_at TIMESTAMPTZ NULL,
    last_favorite_team_notification_at TIMESTAMPTZ NULL,
    -- NOVAS COLUNAS ADICIONADAS:
    stake_sugerida_percentual DECIMAL(5, 4) NULL,
    stake_sugerida_valor DECIMAL(12, 2) NULL,
    total_apostas_diarias_recomendadas TEXT NULL,
    -- FIM DAS NOVAS COLUNAS
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

ALTER TABLE users
ADD COLUMN last_presented_games_context JSONB NULL;

-- Tabela: plans
CREATE TABLE plans (
    plan_id SERIAL PRIMARY KEY,
    plan_name TEXT NOT NULL UNIQUE,
    description TEXT NULL,
    daily_analysis_limit INTEGER NOT NULL DEFAULT 1,
    duration_days INTEGER NULL,
    price DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: user_subscriptions
CREATE TABLE user_subscriptions (
    subscription_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    plan_id INTEGER NOT NULL,
    start_date TIMESTAMPTZ NOT NULL DEFAULT now(),
    end_date TIMESTAMPTZ NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    auto_renews BOOLEAN NOT NULL DEFAULT FALSE,
    payment_transaction_id TEXT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: leagues
CREATE TABLE leagues (
    league_id SERIAL PRIMARY KEY,
    api_football_league_id INTEGER NULL UNIQUE,
    league_name TEXT NOT NULL,
    country_name TEXT NULL,
    league_type TEXT NULL,
    logo_url TEXT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    display_order INTEGER NOT NULL DEFAULT 0,
    coverage_info JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: interaction_log
CREATE TABLE interaction_log (
    log_id BIGSERIAL PRIMARY KEY,
    user_id UUID NULL,
    "timestamp" TIMESTAMPTZ NOT NULL DEFAULT now(),
    event_type TEXT NOT NULL,
    details JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: user_bets
CREATE TABLE user_bets (
    bet_id BIGSERIAL PRIMARY KEY,
    user_id UUID NOT NULL,
    game_id_api_football TEXT NULL,
    league_id INTEGER NULL,
    bet_description TEXT NOT NULL,
    stake_amount DECIMAL(12, 2) NULL,
    odds DECIMAL(5, 2) NULL,
    bet_timestamp TIMESTAMPTZ NOT NULL DEFAULT now(),
    result TEXT NULL,
    profit_loss_amount DECIMAL(12, 2) NULL,
    notes TEXT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Tabela: knowledge_base
CREATE TABLE knowledge_base (
    kb_id SERIAL PRIMARY KEY,
    kb_type TEXT NOT NULL,
    kb_key TEXT NOT NULL,
    kb_value TEXT NOT NULL,
    kb_context_tags JSONB NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT unique_kb_type_key UNIQUE (kb_type, kb_key)
);

-- Tabela: app_settings
CREATE TABLE app_settings (
    setting_id SERIAL PRIMARY KEY,
    setting_name TEXT NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    description TEXT NULL,
    is_secure BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- #############################################################################
-- ## ADIÇÃO DE CHAVES ESTRANGEIRAS (FOREIGN KEYS)                            ##
-- #############################################################################

-- Chave Estrangeira: users.current_subscription_id -> user_subscriptions.subscription_id
ALTER TABLE users
ADD CONSTRAINT fk_users_current_subscription
FOREIGN KEY (current_subscription_id)
REFERENCES user_subscriptions(subscription_id)
ON DELETE SET NULL;

-- Chave Estrangeira: user_subscriptions.user_id -> users.user_id
ALTER TABLE user_subscriptions
ADD CONSTRAINT fk_user_subscriptions_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE CASCADE;

-- Chave Estrangeira: user_subscriptions.plan_id -> plans.plan_id
ALTER TABLE user_subscriptions
ADD CONSTRAINT fk_user_subscriptions_plan
FOREIGN KEY (plan_id)
REFERENCES plans(plan_id)
ON DELETE RESTRICT;

-- Chave Estrangeira: interaction_log.user_id -> users.user_id
ALTER TABLE interaction_log
ADD CONSTRAINT fk_interaction_log_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE SET NULL;

-- Chave Estrangeira: user_bets.user_id -> users.user_id
ALTER TABLE user_bets
ADD CONSTRAINT fk_user_bets_user
FOREIGN KEY (user_id)
REFERENCES users(user_id)
ON DELETE CASCADE;

-- Chave Estrangeira: user_bets.league_id -> leagues.league_id
ALTER TABLE user_bets
ADD CONSTRAINT fk_user_bets_league
FOREIGN KEY (league_id)
REFERENCES leagues(league_id)
ON DELETE SET NULL;

-- #############################################################################
-- ## CRIAÇÃO DOS TRIGGERS PARA 'updated_at'                                  ##
-- #############################################################################

CREATE TRIGGER set_timestamp_users
BEFORE UPDATE ON users
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_plans
BEFORE UPDATE ON plans
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_user_subscriptions
BEFORE UPDATE ON user_subscriptions
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_leagues
BEFORE UPDATE ON leagues
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_user_bets
BEFORE UPDATE ON user_bets
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_knowledge_base
BEFORE UPDATE ON knowledge_base
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

CREATE TRIGGER set_timestamp_app_settings
BEFORE UPDATE ON app_settings
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- #############################################################################
-- ## CONFIGURAÇÃO DE ROW-LEVEL SECURITY (RLS)                                ##
-- #############################################################################

-- NOTA IMPORTANTE SOBRE AUTENTICAÇÃO:
-- As políticas abaixo usam `auth.uid()` para obter o ID do usuário autenticado (tipo UUID).
-- Este é um padrão comum em ambientes como Supabase.
-- Se você estiver usando um mecanismo de autenticação diferente, substitua
-- `auth.uid()` pela função ou variável de sessão apropriada que contém o ID do usuário
-- autenticado no formato UUID.

-- Tabela: users
ALTER TABLE users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Usuários podem ver e modificar seus próprios dados"
ON users
FOR ALL
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- A política de INSERT abaixo funciona bem com user_id UUID DEFAULT auth.uid()
-- pois garante que o user_id do novo registro corresponda ao usuário autenticado.
-- (Ou com o trigger que adicionamos para gerar UUID se auth.uid() for NULL)
CREATE POLICY "Usuários podem criar seu próprio registro (INSERT)"
ON users
FOR INSERT
WITH CHECK (user_id = auth.uid());

-- Tabela: plans
ALTER TABLE plans ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Planos são publicamente visíveis para usuários autenticados"
ON plans
FOR SELECT
USING (auth.role() = 'authenticated');
-- Ou `true` se qualquer um pode ver

-- Para INSERT, UPDATE, DELETE em 'plans', crie políticas restritas a administradores.
-- Exemplo:
-- CREATE POLICY "Administradores podem gerenciar planos"
-- ON plans
-- FOR ALL
-- USING (your_admin_check_function()) -- Substitua pela sua lógica de verificação de admin
-- WITH CHECK (your_admin_check_function());

-- Tabela: user_subscriptions
ALTER TABLE user_subscriptions ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Usuários podem gerenciar suas próprias assinaturas"
ON user_subscriptions
FOR ALL
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- Tabela: leagues
ALTER TABLE leagues ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Ligas são publicamente visíveis para usuários autenticados"
ON leagues
FOR SELECT
USING (auth.role() = 'authenticated');
-- Ou `true`

-- Para INSERT, UPDATE, DELETE em 'leagues', políticas de administrador seriam apropriadas.

-- Tabela: interaction_log
ALTER TABLE interaction_log ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Usuários podem ver seus próprios logs de interação"
ON interaction_log
FOR SELECT
USING (user_id = auth.uid());

CREATE POLICY "Usuários podem registrar seus próprios logs de interação"
ON interaction_log
FOR INSERT
WITH CHECK (user_id = auth.uid());
-- UPDATE e DELETE em logs geralmente não são permitidos para usuários finais.

-- Tabela: user_bets
ALTER TABLE user_bets ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Usuários podem gerenciar suas próprias apostas"
ON user_bets
FOR ALL
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- Tabela: knowledge_base
ALTER TABLE knowledge_base ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Itens da base de conhecimento são publicamente visíveis para usuários autenticados"
ON knowledge_base
FOR SELECT
USING (auth.role() = 'authenticated');
-- Ou `true`

-- Para INSERT, UPDATE, DELETE em 'knowledge_base', políticas de administrador.

-- Tabela: app_settings
ALTER TABLE app_settings ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Configurações não seguras são visíveis para usuários autenticados"
ON app_settings
FOR SELECT
USING (is_secure = FALSE AND auth.role() = 'authenticated');
-- Modificações e leitura de configs seguras devem ser para administradores.

-- #############################################################################
-- ## CONSIDERAÇÕES ADICIONAIS PARA RLS                                       ##
-- #############################################################################
-- 1. Administradores: Defina políticas específicas para roles de administrador.
-- 2. `auth.uid()`: Este script agora assume que `auth.uid()` retorna UUID e as colunas user_id são UUID.
-- 3. Testes: Teste exaustivamente suas políticas RLS.
-- 4. Performance: Monitore queries, especialmente com RLS e subconsultas (se usadas em políticas complexas).
-- 5. BYPASSRLS: Superusuários e roles com BYPASSRLS ignoram RLS. Use com cautela.

-- (Se você implementou o trigger para user_id, ele coexistirá com o DEFAULT auth.uid())
-- CREATE OR REPLACE FUNCTION set_user_id_on_insert()
-- RETURNS TRIGGER AS $$
-- BEGIN
--   IF NEW.user_id IS NULL THEN
--     IF auth.uid() IS NOT NULL THEN
--       NEW.user_id = auth.uid();
--     ELSE
--       NEW.user_id = gen_random_uuid();
--     END IF;
--   END IF;
--   RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- DROP TRIGGER IF EXISTS trigger_users_set_user_id_before_insert ON users;
-- CREATE TRIGGER trigger_users_set_user_id_before_insert
-- BEFORE INSERT ON users
-- FOR EACH ROW
-- EXECUTE FUNCTION set_user_id_on_insert();

-- Fim do script
